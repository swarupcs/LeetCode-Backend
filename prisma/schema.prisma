// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

/**
 * generator client {
 * provider = "prisma-client-js"
 * }
 * datasource db {
 * provider  = "postgresql"
 * url       = env("DATABASE_URL")
 * directUrl = env("DIRECT_URL")
 * }
 */
generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  username  String?  @unique
  image     String?
  role      UserRole @default(USER)
  googleId  String?  @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems      Problem[]
  submission    Submission[]
  problemSolved ProblemSolved[]
  sheets        Sheet[]
}

/**
 * model User {
 * id        String   @id @default(uuid())
 * name      String?
 * email     String   @unique
 * username  String?  @unique
 * phoneNumber String?
 * image     String?
 * bio       String?
 * location  String?
 * githubUrl String?
 * website   String?
 * role      UserRole @default(USER)
 * password  String
 * isVerified         Boolean   @default(false)
 * verifyToken        String?
 * verifyTokenExpiry  DateTime?
 * resetPasswordToken String?
 * resetTokenExpiry   DateTime?
 * createdAt DateTime @default(now())
 * updatedAt DateTime @updatedAt
 * problems      Problem[]
 * submission    Submission[]
 * problemSolved ProblemSolved[]
 * sheets     Sheet[]
 * }
 */

model Problem {
  id            String     @id @default(uuid())
  title         String
  problemNumber Int?       @unique // Optional + Unique
  description   String
  difficulty    Difficulty
  constraints   String
  tags          String[] // ["tag1", "tag2", "tag3"]
  userId        String
  examples      Json
  hints         String?
  editorial     String?
  companyTags   String[]   @default([])

  //testcases          Json 
  codeSnippets       Json
  referenceSolutions Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //  Relationship
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission    Submission[]
  solvedBy      ProblemSolved[]
  problemSheets ProblemInSheet[]
  testCases     TestCase[]

  @@map("Problems") // optional: map table name if needed
}

model TestCase {
  id        String  @id @default(uuid())
  input     String
  expected  String
  isPublic  Boolean @default(false)
  problemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to Problem
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@index([problemId])
}

// enum Status{
//   ACCEPTED
//   WORNG_ANSWER
// }

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String // Accepted , wrong answer
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testCases TestCaseResult[]
}

model TestCaseResult {
  id            String  @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Sheet {
  id          String  @id @default(uuid())
  name        String
  description String?
  userId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems ProblemInSheet[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId]) // unique Sheet names per user
}

model ProblemInSheet {
  id        String   @id @default(uuid())
  sheetId   String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Sheet   Sheet   @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([sheetId, problemId])
}
